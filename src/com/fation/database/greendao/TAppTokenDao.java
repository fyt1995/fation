package com.fation.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fation.database.greendao.TAppToken;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TAPP_TOKEN.
*/
public class TAppTokenDao extends AbstractDao<TAppToken, Long> {

    public static final String TABLENAME = "TAPP_TOKEN";

    /**
     * Properties of entity TAppToken.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Zh = new Property(2, String.class, "zh", false, "ZH");
        public final static Property Zt = new Property(3, String.class, "zt", false, "ZT");
        public final static Property Cjsj = new Property(4, java.util.Date.class, "cjsj", false, "CJSJ");
        public final static Property Xgsj = new Property(5, java.util.Date.class, "xgsj", false, "XGSJ");
    };


    public TAppTokenDao(DaoConfig config) {
        super(config);
    }
    
    public TAppTokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TAPP_TOKEN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TOKEN' TEXT," + // 1: token
                "'ZH' TEXT," + // 2: zh
                "'ZT' TEXT," + // 3: zt
                "'CJSJ' INTEGER," + // 4: cjsj
                "'XGSJ' INTEGER);"); // 5: xgsj
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TAPP_TOKEN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TAppToken entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String zh = entity.getZh();
        if (zh != null) {
            stmt.bindString(3, zh);
        }
 
        String zt = entity.getZt();
        if (zt != null) {
            stmt.bindString(4, zt);
        }
 
        java.util.Date cjsj = entity.getCjsj();
        if (cjsj != null) {
            stmt.bindLong(5, cjsj.getTime());
        }
 
        java.util.Date xgsj = entity.getXgsj();
        if (xgsj != null) {
            stmt.bindLong(6, xgsj.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TAppToken readEntity(Cursor cursor, int offset) {
        TAppToken entity = new TAppToken( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zt
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // cjsj
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // xgsj
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TAppToken entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCjsj(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setXgsj(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TAppToken entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TAppToken entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
