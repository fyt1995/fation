package com.fation.adapter;import java.util.List;import com.gdth.R;import com.gdth.model.ImageItem;import com.gdth.utils.FileUtil;import com.gdth.widget.gridview.adapter.BaseGridViewAdapter;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AbsListView;import android.widget.ImageView;import android.widget.TextView;/** * 动态高度、宽度的GridView数据源,集成BaseGridViewAdapter * @author Arvin * */public class MainGridViewAdapter extends BaseGridViewAdapter{	 	private int columns = 3; 	private int rows = 4;        public MainGridViewAdapter(Context mContext, List<ImageItem> vList) {          super(mContext, vList);    }        public MainGridViewAdapter(Context mContext, List<ImageItem> vList, int columns) {          super(mContext, vList);                this.columns = columns;    }	@Override     public View getView(final int arg0, View arg1, ViewGroup arg2) {		ImageItem model = vList.get(arg0);				ViewHolder holder = null;		if (arg1 == null){			holder = new ViewHolder();						arg1 = LayoutInflater.from(mContext).inflate(layout, arg2, false);					    holder.localTextView = (TextView) arg1.findViewById(R.id.gridview_item_txt);		    holder.localImageView = (ImageView) arg1.findViewById(R.id.gridview_item_img);			    arg1.setTag(holder);        }		else {			holder = (ViewHolder) arg1.getTag();		}				int height = (int) arg2.getHeight() / rows;		int width = arg2.getWidth() / columns;		if (height > width){			arg1.setLayoutParams(new AbsListView.LayoutParams(width - 1, width));		}		else {			// 动态设置item的高度 			arg1.setLayoutParams(new AbsListView.LayoutParams(width - 1, height));		}		if (holder != null){			holder.localTextView.setText(model.getValue());						if (model.getImg() != null){				int resId = mContext.getResources().getIdentifier(model.getImg(),"drawable", mContext.getPackageName());				Bitmap bitmap = BitmapFactory.decodeResource(mContext.getResources(), resId);				holder.localImageView.setImageBitmap(bitmap);		    }		}		        return arg1;      }  		public static class ViewHolder{		public TextView localTextView = null;		public ImageView localImageView = null;	}		public void serColumns(int columns){		this.columns = columns;	}		public void setRows(int rows){		this.rows = rows;	}}